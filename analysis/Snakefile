configfile:
  "config.yaml"

rule all:
  input:
    site_pi = expand("output/single_pop_sumstats/site_pi_{species}_{minspcov}.txt", species = config["INLONG"], minspcov = config["MINSPCOV"]),
    ind_pi = expand("output/single_pop_sumstats/ind_pi_{species}_{minspcov}.txt", species = config["INLONG"], minspcov = config["MINSPCOV"]),
    wat_theta = expand("output/single_pop_sumstats/wat_theta_{species}_{minspcov}.txt", species = config["INLONG"], minspcov = config["MINSPCOV"]),
    taj_d = expand("output/single_pop_sumstats/taj_d_{species}_{minspcov}.txt", species = config["INLONG"], minspcov = config["MINSPCOV"]),
    sfs = expand("output/single_pop_sumstats/sfs_{species}_{minspcov}.txt", species = config["INLONG"], minspcov = config["MINSPCOV"]),
    num_sites = expand("output/single_pop_sumstats/num_sites_{species}_{minspcov}.txt", species = config["INLONG"], minspcov = config["MINSPCOV"]),
    s_pop_sumstats = "single_pop_sumstats.html",
    construct_matrices = expand("output/construct_matrices/construct_{species}_{minspcov}.txt", species = config["INLONG"], minspcov = config["MINSPCOV"])
    cat_proj_cropped = "output/sdm_projections/projections_cat_inland-removed.tif"
    

# calculate single population summary statistics
## pi (per-site and per-individual), watterson's theta, tajima's d
rule calc_single_pop_sumstats:
  input:
    expand("data/vcfs/clust92_{species}_{minspcov}_nosingletons.vcf", species = config["INLONG"], minspcov = config["MINSPCOV"])
  output:
    site_pi = expand("output/single_pop_sumstats/site_pi_{species}_{minspcov}.txt", species = config["INLONG"], minspcov = config["MINSPCOV"]),
    ind_pi = expand("output/single_pop_sumstats/ind_pi_{species}_{minspcov}.txt", species = config["INLONG"], minspcov = config["MINSPCOV"]),
    wat_theta = expand("output/single_pop_sumstats/wat_theta_{species}_{minspcov}.txt", species = config["INLONG"], minspcov = config["MINSPCOV"]),
    taj_d = expand("output/single_pop_sumstats/taj_d_{species}_{minspcov}.txt", species = config["INLONG"], minspcov = config["MINSPCOV"]),
    sfs = expand("output/single_pop_sumstats/sfs_{species}_{minspcov}.txt", species = config["INLONG"], minspcov = config["MINSPCOV"]),
    num_sites = expand("output/single_pop_sumstats/num_sites_{species}_{minspcov}.txt", species = config["INLONG"], minspcov = config["MINSPCOV"])
  script:
    "scripts/calc_single_pop_sumstats.py"

# make a quarto report to visualize single pop sumstats across missingness thresholds per species
rule plot_single_pop_sumstats:
  input:
    site_pi = expand("output/single_pop_sumstats/site_pi_{species}_{minspcov}.txt", species = config["INLONG"], minspcov = config["MINSPCOV"]),
    ind_pi = expand("output/single_pop_sumstats/ind_pi_{species}_{minspcov}.txt", species = config["INLONG"], minspcov = config["MINSPCOV"]),
    wat_theta = expand("output/single_pop_sumstats/wat_theta_{species}_{minspcov}.txt", species = config["INLONG"], minspcov = config["MINSPCOV"]),
    taj_d = expand("output/single_pop_sumstats/taj_d_{species}_{minspcov}.txt", species = config["INLONG"], minspcov = config["MINSPCOV"]),
    sfs = expand("output/single_pop_sumstats/sfs_{species}_{minspcov}.txt", species = config["INLONG"], minspcov = config["MINSPCOV"]),
    num_sites = expand("output/single_pop_sumstats/num_sites_{species}_{minspcov}.txt", species = config["INLONG"], minspcov = config["MINSPCOV"]),
    ind_lists = expand("data/{species}_inds.txt", species = config["INLONG"])
  params:
    inlong = config["INLONG"]
  output:
    "single_pop_sumstats.md"
  shell:
    "quarto render single_pop_sumstats.qmd \
    -P site_pi:'{input.site_pi}' \
    -P ind_pi:'{input.ind_pi}' \
    -P wat_theta:'{input.wat_theta}' \
    -P taj_d:'{input.taj_d}' \
    -P sfs:'{input.sfs}' \
    -P num_sites:'{input.num_sites}' \
    -P inlong:'{params.inlong}' \
    -P ind_lists:'{input.ind_lists}'"


# I need to add SDM here

# crop catenatus projections because of removing the inland individuals
rule crop_cat_proj:
  input:
    "output/sdm_projections/projections_cat.tif"
  output:
    "output/sdm_projections/projections_cat_inland-removed.tif"
  script:
    "scripts/crop_cat_projections.py"
