---
title: "conStruct analysis"
format: gfm
execute:
  message: false
  warning: false
editor: visual
---

# conStruct analysis

Population structure using the R package [conStruct,](https://github.com/gbradburd/conStruct) which takes into account spatial genetic structure when modeling discrete genetic structure.

## Setup

```{r}
#| label: load-packages

library(conStruct)
library(tidyverse)
library(fields)
library(here)

```

All conStruct matrices were created using the python script `analysis/scripts/vcf_to_construct.py.`

```{r}
#| label: read-data

# iheringii

## get the localities
locs_ihe <-
  read_csv(here("analysis", "data", "enyalius_locs_genetics.csv")) %>%
  filter(species == "iheringii")

## get the names of the samples in the correct order to add rownames to the conStruct matrix
vcf_sample_id <-
  read_tsv(
    here(
      "analysis",
      "data",
      "vcfs",
      "clust92_iheringii_0.6_nosingletons.vcf"
    ),
    n_max = 2,
    skip = 10
  ) %>%
  select(starts_with("ihe_")) %>%
  colnames()

## read in the conStruct matrices, using the vcf sample IDs as rownames and locus numbers (arbitrary) as column names
## NA values are -9
con_mat_ihe <-
  read.table(
    here(
      "analysis",
      "output",
      "construct_matrices",
      "construct_iheringii_0.6.txt"
    ),
  ) %>% 
  as.matrix()

# replace -9 with NA
con_mat_ihe[con_mat_ihe == -9] <- NA

rownames(con_mat_ihe) <- vcf_sample_id
colnames(con_mat_ihe) <- paste0("loc", 1:ncol(con_mat_ihe))

## filter coords so they're the same order as in the allele counts matrix and select just the coordinates
coords_ihe <- locs_ihe %>% 
  select(longitude, latitude, id_code) %>% 
  arrange(match(locs_ihe$id_code, vcf_sample_id)) %>% 
  select(-id_code) %>% 
  as.matrix()

# get the geographic distances 
geodist_ihe <- fields::rdist.earth(as.matrix(coords_ihe))



```

## Run conStruct

I am going to use the layer contributions method of comparing among *K* values. conStruct works by estimating a parametric covariance matrix to fit the empirical allelic covariance. Each *K* corresponds with a layer in the model, which contributes to the parametric covariance. If there's a layer that no individuals draw at least a small amount of admixture from, it contributes almost nothing to the overall covariance, and is therefore not biologically important. This approach allows me to select *K* values that are of more biological importance.

In contrast, cross-validation tends to favor models with higher *K* values, even if they contribute little to the parametric covariance matrix.

So, I am going to run a conStruct model with a not-too-big *K* value(4) and use layer contributions to see if I need to fit a model with a lower *K* or higher *K*.

```{r}
#| label: run-con-ihe

cl <- makeCluster()
run_prefix_ihe <- "cv_ihe"

con_ihe_cv <- x.validation(
  train.prop = 0.8,
  n.reps = 5,
  K = 1:5,
  freqs = con_mat_ihe,
  geoDist = geodist_ihe,
  coords = coords_ihe,
  prefix = cv_ihe,
  n.iter = 4000,
  make.figs = FALSE,
  save.files = FALSE,
  parallel = TRUE,
  n.nodes = 5,
)

# move output files to output folder 
con_ihe_outfiles <- list.files(here(), pattern = run_prefix_ihe, full.names = TRUE)

for (i in con_ihe_outfiles) {
  bn <- basename(i)
  outdir <- here("analysis", "output", "construct_output")
  outfile <- file.path(outdir, bn)
  file.rename(from = i, to = outfile)
}


```

## Layer contributions

```{r}
#| label: load-results-db

#### I need to replace with relative paths#####
load("/Users/connorfrench/Dropbox/Old_Mac/School_Stuff/CUNY/enyalius-phylogeography/enyalius/ihe_k4_conStruct.results.Robj")

load("/Users/connorfrench/Dropbox/Old_Mac/School_Stuff/CUNY/enyalius-phylogeography/enyalius/ihe_k4_data.block.Robj")

```

```{r}
#| label: layer-cont-ihe

calculate.layer.contribution(conStruct.results[[1]], data.block)

```
