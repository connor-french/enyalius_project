configfile:
  "config.yaml"

FASTQS = glob_wildcards("fastq/{condition}.fastq.gz").condition #list of fastq files

rule all:
  input:
    expand("fastq/{file}_fastqc.html", file = FASTQS),
    expand("fastq/{file}_fastqc.zip", file = FASTQS),
    "multiqc_report.html",
    "run_ipyrad.done",
    "run_ipyrad_clust_branches.done",
    "full/clust94_clust_0.94",
    expand("{folder}clust{thresh}_share.csv", folder = config["SHAREOUT"], thresh = config["CLUSTTHRESHFULL"]),
    "processed_localities/locs_nobad.csv",
    expand("{folder}pcs_{species}.csv", folder = config["PCABATCHOUT"], species = config["SPLONG"]),
    expand("{folder}pcs_{splong}_{thresh}.csv", folder = config["PCACLUSTOUT"], splong = config["SPLONG"], thresh = config["CLUSTTHRESHFULL"]),
    expand("{folder}var_{splong}_{thresh}.csv", folder = config["PCACLUSTOUT"], splong = config["SPLONG"], thresh = config["CLUSTTHRESHFULL"]),
    "assembly-qc.html",
    "full/clust92_outfiles/clust92.imiss",
    "full/clust92_outfiles/clust92_nobad.vcf",
    expand("{species}_inds.txt", species = config["INLONG"]),
    "processed_localities/locs_nobad_final.csv",
    expand("full/clust92_outfiles/clust92_{species}_{minspcov}.recode.vcf", species = config["INLONG"], minspcov = config["MINSPCOV"]),
    expand("full/clust92_outfiles/clust92_{species}_{minspcov}_nosingletons.vcf", species = config["INLONG"], minspcov = config["MINSPCOV"])

rule run_fastqc:
  input:
    expand("fastq/{file}.fastq.gz", file = FASTQS)
  output:
    expand("fastq/{file}_fastqc.html", file = FASTQS),
    expand("fastq/{file}_fastqc.zip", file = FASTQS)
  log:
    expand("logs/fastqc/{file}.log", file = FASTQS)
  shell:
    "fastqc {input}"

rule multiqc_report:
  input:
    "fastq/"
  output:
    "multiqc_report.html"
  log:
    "logs/multiqc/multiqc_report.log"
  shell:
    "multiqc {input} -n {output}"

rule run_ipyrad:
  input:
    "params_full-clust90.txt"
  output:
    touch("run_ipyrad.done")
  shell:
    "ipyrad -p {input} -s 34567"


rule run_ipyrad_clust_branches:
  input:
    p1="full/full_clust90.json"
  output:
    touch("run_ipyrad_clust_branches.done")
  params:
    cb=config["CLUSTBRANCHES"]
  script:
    "scripts/run_ipyrad_clust_branches.py"

# clust94 added a very small decimal place for some reason
rule rename_clust94:
  input:
    "full/clust94_clust_0.9400000000000001"
  output:
    "full/clust94_clust_0.94"
  shell:
    "rename {input} {output}"

# calculate sharing matrices for different clustering thresholds
rule run_sharing:
  input:
    config["SNPPATHS"]
  output:
    expand("{folder}clust{thresh}_share.csv", folder = config["SHAREOUT"], thresh = config["CLUSTTHRESHFULL"])
  script:
    "scripts/run_sharing.py"

# remove poorly sequenced individuals
rule process_locs:
  output:
    "processed_localities/locs_nobad.csv"
  script:
    "scripts/process_locs.R"

# run PCAs for batch effects and clustering thresholds
# I forgot to set seeds, so the PCA imputation will result in slightly different results from the publication. This will not change the interpretation.

rule run_ipyrad_pca:
  input:
    config["SNPPATHS"]
  params:
    splist = config["SPLONG"],
    clust_thresh = config["CLUSTTHRESHFULL"],
    batch_out = expand("{folder}pcs_{species}.csv", folder = config["PCABATCHOUT"], species = config["SPLONG"]),
    pca_out = config["PCACLUSTOUT"]
  output:
    batch_out = expand("{folder}pcs_{species}.csv", folder = config["PCABATCHOUT"], species = config["SPLONG"]),
    clust_pc_out = expand("{folder}pcs_{splong}_{thresh}.csv", folder = config["PCACLUSTOUT"], splong = config["SPLONG"], thresh = config["CLUSTTHRESHFULL"]),
    clust_var_out = expand("{folder}var_{splong}_{thresh}.csv", folder = config["PCACLUSTOUT"], splong = config["SPLONG"], thresh = config["CLUSTTHRESHFULL"])
  script: "scripts/run_ipyrad_pca.py"

# generate quarto report for assembly qc
rule run_assembly_qc_report:
  input:
    locs = "processed_localities/locs_nobad.csv",
    # ipyrad stats from random cluster for batch effects pca
    ip_stats_94 = "full/clust94_outfiles/clust94_stats.txt",
    share_paths = expand("{folder}clust{thresh}_share.csv", folder = config["SHAREOUT"], thresh = config["CLUSTTHRESHFULL"]),
    pca_batch_paths = expand("{folder}pcs_{species}.csv", folder = config["PCABATCHOUT"], species = config["SPLONG"]),
    clust_var_paths = expand("{folder}var_{splong}_{thresh}.csv", folder = config["PCACLUSTOUT"], splong = config["SPLONG"], thresh = config["CLUSTTHRESHFULL"]),
    clust_pc_paths = expand("{folder}pcs_{splong}_{thresh}.csv", folder = config["PCACLUSTOUT"], splong = config["SPLONG"], thresh = config["CLUSTTHRESHFULL"])
  params:
    thresh = config["CLUSTTHRESHFULL"],
    ipstats = config["IPSTATS"],
    outshort = config["OUTSHORT"],
    inlong = config["INLONG"]
  output:
    "assembly-qc.html"
  log:
    "logs/assembly-qc/assembly-qc.log"
  shell:
    "quarto render assembly-qc.qmd \
    -P locs:{input.locs} \
    -P ip_stats_94:{input.ip_stats_94} \
    -P share_paths:'{input.share_paths}' \
    -P pca_batch_paths:'{input.pca_batch_paths}' \
    -P clust_var_paths:'{input.clust_var_paths}' \
    -P clust_pc_paths:'{input.clust_pc_paths}' \
    -P thresh:'{params.thresh}' \
    -P ipstats:'{params.ipstats}' \
    -P outshort:'{params.outshort}' \
    -P inlong:'{params.inlong}'"

# get per-individual missingness for each species
rule get_individual_missingness:
  input:
    "full/clust92_outfiles/clust92.vcf"
  output:
    "full/clust92_outfiles/clust92.imiss"
  shell:
    "vcftools --vcf {input} --missing-indv --stdout > {output}"

# remove individuals with excessive per-individual missingness
rule remove_bad_individuals:
  input:
    vcf = "full/clust92_outfiles/clust92.vcf"
  params:
    out_prefix = "full/clust92_outfiles/clust92_nobad"
  output:
    "full/clust92_outfiles/clust92_nobad.vcf"
  shell:
    "vcftools --vcf {input.vcf} --remove-indv per_bana_CTMZ03943 --remove-indv cat_cam_PEU322 --remove-indv pic_barr_MTR34443 --recode --recode-INFO-all --stdout > {output}"

# generate lists of individuals per species to use for splitting the vcf into per-species VCFs
rule list_ind_per_sp:
  input:
    csv = "processed_localities/locs_nobad.csv"
  params:
    bad_inds = config["BADINDS"]
  output:
    expand("{species}_inds.txt", species = config["INLONG"])
  script:
    "scripts/inds_per_species.R"

# remove the additional "bad" individuals from the locs_nobad.csv file
rule remove_bad_inds:
  input:
    csv = "processed_localities/locs_nobad.csv",
  params:
    bad_inds = config["BADINDS"]
  output:
    "processed_localities/locs_nobad_final.csv"
  script:
    "scripts/remove_bad_locs.R"


# split vcf accross species and missingness values
# I'm also removing multiallelic sites from the vcfs. For whatever reason, ipyrad didn't remove all of them. The PCAs and analyses I performed earlier automatically remove them, so I don't need to perform the filtering earlier
for sp in config["INLONG"]:
  for m in config["MINSPCOV"]:
    rule:
      input:
        vcf = "full/clust92_outfiles/clust92_nobad.vcf",
        ind = f"{sp}_inds.txt"
      params:
        minspcov = m
      output:
        f"full/clust92_outfiles/clust92_{sp}_{m}.recode.vcf"
      shell:
        f"vcftools --vcf {{input.vcf}} --keep {{input.ind}} --max-missing {{params.minspcov}} --max-alleles 2 --recode --recode-INFO-all --stdout > {{output}}"

# remove singletons from vcfs

rule remove_singletons:
  input:
    expand("full/clust92_outfiles/clust92_{species}_{minspcov}.recode.vcf", species = config["INLONG"], minspcov = config["MINSPCOV"])
  output:
    expand("full/clust92_outfiles/clust92_{species}_{minspcov}_nosingletons.vcf", species = config["INLONG"], minspcov = config["MINSPCOV"])
  script:
    "scripts/remove_singletons.py"





